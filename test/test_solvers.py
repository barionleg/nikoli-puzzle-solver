from solvers import solve
import unittest


class TestSolvers(unittest.TestCase):

    def test_lits(self):
        pzprv3 = ('pzprv3/lits/10/10/13/0 0 0 0 0 1 2 2 2 2 /0 3 0 0 0 1 1 4 4 4 /0 3 0 0 0 0 1 4 5 5 /0 3 0 1 1 1 1 4 '
                  + '4 5 /0 3 3 6 6 6 6 4 5 5 /7 7 7 7 7 7 6 5 5 5 /8 8 7 7 7 6 6 5 5 9 /10 8 8 10 10 10 11 5 9 9 /10 1'
                  + '0 10 10 10 10 11 5 5 9 /12 12 12 12 10 11 11 11 5 5 /. . . . . . . . . . /. . . . . . . . . . /. .'
                  + ' . . . . . . . . /. . . . . . . . . . /. . . . . . . . . . /. . . . . . . . . . /. . . . . . . . .'
                  + ' . /. . . . . . . . . . /. . . . . . . . . . /. . . . . . . . . . /')
        expect = ('pzprv3/lits/10/10/13/0 0 0 0 0 1 2 2 2 2 /0 3 0 0 0 1 1 4 4 4 /0 3 0 0 0 0 1 4 5 5 /0 3 0 1 1 1 1 4 '
                  + '4 5 /0 3 3 6 6 6 6 4 5 5 /7 7 7 7 7 7 6 5 5 5 /8 8 7 7 7 6 6 5 5 9 /10 8 8 10 10 10 11 5 9 9 /10 1'
                  + '0 10 10 10 10 11 5 5 9 /12 12 12 12 10 11 11 11 5 5 /+ + + + + + # # # # /+ + + # # + + # + + /+ #'
                  + ' # # + + + # + # /+ # + # # # # # # # /+ # # + + + # + + # /+ + # # # + # + + # /# # + # + # # + +'
                  + ' # /+ # # # # + + + # # /+ + + + # + # + + # /# # # # # # # # + + /')
        self.assertEqual(expect, solve(pzprv3))

    def test_masyu(self):
        pzprv3 = ('pzprv3/mashu/10/10/. . 1 . 1 . . . . . /. . . . 1 . . . 2 . /. . 2 . 2 . 1 . . . /. . . 1 . . 1 . . '
                  + '. /2 . . . . 1 . . . 1 /. . 1 . . . . 1 . . /. . 2 . . . 1 . . . /1 . . . 2 . . . . 1 /. . . . . .'
                  + ' 1 1 . . /. . 2 . . . . . . 2 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 '
                  + '0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0'
                  + ' 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 0 /0 0 0 0 0 '
                  + '0 0 0 0 0 /0 0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 0 /0 0'
                  + ' 0 0 0 0 0 0 0 0 /')
        expect = ('pzprv3/mashu/10/10/. . 1 . 1 . . . . . /. . . . 1 . . . 2 . /. . 2 . 2 . 1 . . . /. . . 1 . . 1 . . '
                  + '. /2 . . . . 1 . . . 1 /. . 1 . . . . 1 . . /. . 2 . . . 1 . . . /1 . . . 2 . . . . 1 /. . . . . .'
                  + ' 1 1 . . /. . 2 . . . . . . 2 /0 1 1 1 1 0 1 1 1 /1 0 0 1 1 0 1 1 0 /1 1 0 0 1 1 1 0 0 /0 0 0 0 0 '
                  + '1 1 0 0 /1 1 0 1 0 0 0 1 0 /0 1 1 1 0 0 0 0 1 /0 0 1 1 0 1 1 0 1 /0 0 0 0 1 1 1 1 0 /1 0 0 0 0 1 1'
                  + ' 1 0 /0 0 1 1 0 1 1 1 1 /0 1 0 0 0 1 1 0 0 1 /1 0 0 1 0 0 0 0 1 1 /0 0 1 1 1 0 0 1 1 1 /0 0 1 1 1 '
                  + '1 0 0 1 1 /1 0 0 0 0 1 0 1 0 1 /1 1 0 0 1 1 0 1 1 0 /1 1 1 0 0 0 0 0 0 1 /1 1 1 0 1 0 0 0 1 1 /0 0'
                  + ' 1 0 1 1 0 0 0 1 /')
        self.assertEqual(expect, solve(pzprv3))

    def test_nurikabe(self):
        pzprv3 = ('pzprv3/nurikabe/9/10/2 . . . . . . . . 2 /. . . . . . 2 . . . /. 2 . . 7 . . . . . /. . . . . . . . '
                  + '. . /. . . . . . 3 . 3 . /. . 2 . . . . 3 . . /2 . . 4 . . . . . . /. . . . . . . . . . /. 1 . . .'
                  + ' . 2 . 4 . /')
        expect = ('pzprv3/nurikabe/9/10/2 + # + + + # # + 2 /# # # + + # 2 # # # /# 2 # + 7 # + # + # /# + # # # # # # '
                  + '+ # /# # + # + + 3 # 3 # /+ # 2 # # # # 3 # # /2 # # 4 + # + + # + /# # + + # # # # # + /# 1 # # #'
                  + ' + 2 # 4 + /')
        self.assertEqual(expect, solve(pzprv3))

    def test_skyscrapers(self):
        pzprv3 = ('pzprv3/skyscrapers/5/5/. 4 2 1 2 3 . /3 . . . . . 3 /2 . . . . . 4 /3 . . . . . 1 /2 . . . . . 2 /1 '
                  + '. . . . . 2 /. 1 4 3 2 2 . /')
        expect = ('pzprv3/skyscrapers/5/5/. 4 2 1 2 3 . /3 2 3 5 4 1 3 /2 1 5 4 3 2 4 /3 3 4 2 1 5 1 /2 4 2 1 5 3 2 /1 '
                  + '5 1 3 2 4 2 /. 1 4 3 2 2 . /')
        self.assertEqual(expect, solve(pzprv3))

    def test_slitherlink(self):
        pzprv3 = ('pzprv3.1/slither/6/6/. . . . 0 . /3 3 . . 1 . /. . 1 2 . . /. . 2 0 . . /. 1 . . 1 1 /. 2 . . . . /0'
                  + ' 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 0 /0 0 0 '
                  + '0 0 0 0 /0 0 0 0 0 0 0 /0 0 0 0 0 0 0 /0 0 0 0 0 0 0 /0 0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0'
                  + ' 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /')
        expect = ('pzprv3.1/slither/6/6/. . . . 0 . /3 3 . . 1 . /. . 1 2 . . /. . 2 0 . . /. 1 . . 1 1 /. 2 . . . . /0'
                  + ' 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /0 0 0 0 0 0 /1 0 0 1 0 0 0 /1 1 1 '
                  + '1 0 1 1 /0 0 1 0 1 1 1 /0 0 1 0 0 0 1 /0 0 0 1 0 0 1 /1 0 0 0 1 1 1 /1 1 1 0 0 0 /0 1 0 0 0 1 /1 0'
                  + ' 0 1 0 0 /0 0 0 0 1 0 /0 0 1 0 0 0 /1 1 1 0 1 0 /1 1 1 1 0 1 /')
        self.assertEqual(expect, solve(pzprv3))

    def test_starbattle(self):
        pzprv3 = ('pzprv3/starbattle/10/10/2/10/0 0 0 0 0 1 1 2 2 2 /0 0 0 0 0 1 1 1 2 2 /0 0 0 0 0 1 1 1 1 1 /3 3 3 0 '
                  + '4 4 1 1 1 5 /3 6 6 6 4 4 1 1 5 5 /6 6 6 6 4 4 1 5 5 5 /6 6 6 6 6 7 1 5 5 5 /6 6 6 6 6 7 1 5 5 7 /8'
                  + ' 8 8 7 7 7 7 7 7 7 /7 7 7 7 9 9 9 9 9 9 /. . . . . . . . . . /. . . . . . . . . . /. . . . . . . .'
                  + ' . . /. . . . . . . . . . /. . . . . . . . . . /. . . . . . . . . . /. . . . . . . . . . /. . . . '
                  + '. . . . . . /. . . . . . . . . . /. . . . . . . . . . /')
        expect = ('pzprv3/starbattle/10/10/2/10/0 0 0 0 0 1 1 2 2 2 /0 0 0 0 0 1 1 1 2 2 /0 0 0 0 0 1 1 1 1 1 /3 3 3 0 '
                  + '4 4 1 1 1 5 /3 6 6 6 4 4 1 1 5 5 /6 6 6 6 4 4 1 5 5 5 /6 6 6 6 6 7 1 5 5 5 /6 6 6 6 6 7 1 5 5 7 /8'
                  + ' 8 8 7 7 7 7 7 7 7 /7 7 7 7 9 9 9 9 9 9 /+ + + + + + + # + # /+ # + # + + + + + + /+ + + + + + # +'
                  + ' # + /+ + # + # + + + + + /# + + + + + + + # + /+ + + # + # + + + + /+ # + + + + + # + + /+ + + + '
                  + '+ # + + + # /# + # + + + + + + + /+ + + + # + # + + + /')
        self.assertEqual(expect, solve(pzprv3))

    def test_sudoku(self):
        pzprv3 = ('pzprv3/sudoku/9/5 3 . . 7 . . . . /6 . . 1 9 5 . . . /. 9 8 . . . . 6 . /. . . . 6 . . . 3 /4 . . 8 '
                  + '. 3 . . 1 /7 . . . 2 . . . 6 /. 6 . . . . 2 8 . /. . . 4 1 9 . . 5 /. . . . 8 . . 7 9 /. . . . . .'
                  + ' . . . /. . . . . . . . . /. . . . . . . . . /. . . . . . . . . /. . . . . . . . . /. . . . . . . '
                  + '. . /. . . . . . . . . /. . . . . . . . . /. . . . . . . . . /')
        expect = ('pzprv3/sudoku/9/5 3 . . 7 . . . . /6 . . 1 9 5 . . . /. 9 8 . . . . 6 . /. . . . 6 . . . 3 /4 . . 8 '
                  + '. 3 . . 1 /7 . . . 2 . . . 6 /. 6 . . . . 2 8 . /. . . 4 1 9 . . 5 /. . . . 8 . . 7 9 /. . 4 6 . 8'
                  + ' 9 1 2 /. 7 2 . . . 3 4 8 /1 . . 3 4 2 5 . 7 /8 5 9 7 . 1 4 2 . /. 2 6 . 5 . 7 9 . /. 1 3 9 . 4 8 '
                  + '5 . /9 . 1 5 3 7 . . 4 /2 8 7 . . . 6 3 . /3 4 5 2 . 6 1 . . /')
        self.assertEqual(expect, solve(pzprv3))


if __name__ == '__main__':
    unittest.main()
